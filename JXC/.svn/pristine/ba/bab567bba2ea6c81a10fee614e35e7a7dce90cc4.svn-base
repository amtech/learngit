package com.jxc.web.user.ctrl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.druid.util.StringUtils;
import com.alibaba.fastjson.JSON;
import com.jxc.web.user.model.CounterEntity;
import com.jxc.web.user.model.EquipmentEntity;
import com.jxc.web.user.service.CounterService;
import com.jxc.web.user.service.EquipmentService;
import com.jxc.web.user.service.InfoService;
import com.jxc.web.user.service.OrderService;

@Controller
@RequestMapping("equipment")
public class EquipmentCtl {
	@Autowired
	private EquipmentService equipmentservice;
	@Autowired
	private InfoService infoservice;
	@Autowired
	private OrderService orderService;
	@Autowired
	private CounterService counterservice;
	/**
	 * 默认列表页
	 * @return
	 */
	@RequestMapping(value="list")
	public String list(Model model){
		 
        List<String> country = orderService.getCountryVlueAndText();
        List<CounterEntity> listeounter = counterservice.getList();
        
		model.addAttribute("country",country);
		model.addAttribute("counterlist",listeounter);
        
		return "equipment/equipment_list";
	}
	
	/**
	 * 获取所有设备
	 * @return
	 */
	@RequestMapping(value="getAll")
	public String lists(Model model){
		 List<String> country = orderService.getCountryVlueAndText();
	     List<CounterEntity> listeounter = counterservice.getList();
		
	 	 model.addAttribute("country",country);
	     model.addAttribute("counterlist",listeounter);
		 return "equipment/equipment_lists";
	}
	
	@RequestMapping(value="getAllLists")
	public @ResponseBody String queryEquipmentList(String page,String rows,HttpServletRequest request){
		//当前页  
        int intPage = Integer.parseInt((page == null || page == "0") ? "1":page);  
        //每页显示条数  
        int number = Integer.parseInt((rows == null || rows == "0") ? "10":rows);  
        //每页的开始记录  第一页为1  第二页为number +1   
        if(intPage<=0)
        	intPage = 1;
        int start = (intPage-1)*number;  
        int total = equipmentservice.queryEquipmentRows();
        
        HttpSession session = request.getSession();
        String gradetype = (String) session.getAttribute("gradetype");
        CounterEntity ce = (CounterEntity) session.getAttribute("counters");
        
		List<EquipmentEntity> lists = new ArrayList<EquipmentEntity>();
		lists = equipmentservice.queryEquipmentByPage(start, number);
		for(EquipmentEntity ee:lists){
			ee.setIs_valid(isValid(ee.getIs_valid()));
			if(ee.getRent_begindate()!=null)
			ee.setRent_begindate(subDate(ee.getRent_begindate()));
			if(ee.getRent_enddate()!=null)
			ee.setRent_enddate(subDate(ee.getRent_enddate()));
			if(ee.getRent_expectdate()!=null)
			ee.setRent_expectdate(subDate(ee.getRent_expectdate()));
			if(ee.getScrap_date()!=null)
			ee.setScrap_date(subDate(ee.getScrap_date()));
			if(ee.getStock_date()!=null)
			ee.setStock_date(subDate(ee.getStock_date()));
			if(ee.getCreate_time()!=null)
			ee.setCreate_time(subDate(ee.getCreate_time()));
			if(ee.getModify_time()!=null)
			ee.setModify_time(subDate(ee.getModify_time()));
			ee.setCounterid(equipmentservice.queryCounterName(ee.getCounterid()));
			ee.setD_country(orderService.queryDcountry(ee.getNo()));
			if(ee.getEquipment_type().equals("0001")){
				ee.setEquipment_type("内部设备");
				ee.setDeposit(equipmentservice.queryDepositByEtype("内部设备"));
			}else{
				ee.setDeposit(equipmentservice.queryDepositByEtype("外部设备"));
				ee.setEquipment_type("外部设备");
			}
			if(ee.getEquipment_state().equals("0001")){
				ee.setEquipment_state("可用");
			}else{
				ee.setEquipment_state("已租");
			}
			if(ee.getSim_id()!=null){
				ee.setSim_id("已绑定");
			}else{
				ee.setSim_id("未绑定");
			}
			
		} 
		
		Map map = new HashMap();
		map.put("total", total);
		map.put("rows", lists);
		
		return JSON.toJSONString(map);
	}
	/**
	 * 获取可用设备列表
	 * @param model
	 * @return
	 */
	@RequestMapping(value="getlist")
	public @ResponseBody String queryOrder(Model model,String page,String rows,HttpServletRequest request){
		Map getlist = new HashMap();
		//当前页  
        int intPage = Integer.parseInt((page == null || page == "0") ? "1":page);  
        //每页显示条数  
        int number = Integer.parseInt((rows == null || rows == "0") ? "10":rows);  
        //每页的开始记录  第一页为1  第二页为number +1   
        if(intPage<=0)
        	intPage = 1;
        int start = (intPage-1)*number;  
        int total = equipmentservice.queryEquipmentInvalidRows();
        
        HttpSession session = request.getSession();
        String gradetype = (String) session.getAttribute("gradetype");
        CounterEntity ce = (CounterEntity) session.getAttribute("counters");
       
		List<EquipmentEntity> lists = new ArrayList<EquipmentEntity>();
		getlist.put("start", start);
		getlist.put("number", number);
		//System.out.println(session.getAttribute("gradetype"));
		if(gradetype.equals("0000")){
			lists = equipmentservice.getList(getlist);
		}else{
			lists = equipmentservice.getNowList(start, number, ce.getCounter_code());
		}
		for(EquipmentEntity ee:lists){
			ee.setIs_valid(isValid(ee.getIs_valid()));
			if(ee.getRent_begindate()!=null)
			ee.setRent_begindate(subDate(ee.getRent_begindate()));
			if(ee.getRent_enddate()!=null)
			ee.setRent_enddate(subDate(ee.getRent_enddate()));
			if(ee.getRent_expectdate()!=null)
			ee.setRent_expectdate(subDate(ee.getRent_expectdate()));
			if(ee.getScrap_date()!=null)
			ee.setScrap_date(subDate(ee.getScrap_date()));
			if(ee.getStock_date()!=null)
			ee.setStock_date(subDate(ee.getStock_date()));
			if(ee.getCreate_time()!=null)
			ee.setCreate_time(subDate(ee.getCreate_time()));
			if(ee.getModify_time()!=null)
			ee.setModify_time(subDate(ee.getModify_time()));
			//System.out.println(ee.getCounterid()+":"+ee.getNo()+":"+ee.getEquipment_type());
			ee.setCounterid(equipmentservice.queryCounterName(ee.getCounterid()));
			String countryd = orderService.queryDcountry(ee.getNo());
			ee.setD_country(countryd);
			if(ee.getEquipment_type().equals("0001"))
			ee.setDeposit(equipmentservice.queryDepositByEtype("内部设备"));
			//System.out.println(ee.getDeposit());
			/*Map<String,String> countrys = infoservice.queryD_country(ee.getNo());
			if(countrys!=null){
				ee.setD_country(countrys.get("ITEM_TEXT"));
			}*/
		} 
		Map map = new HashMap();
		map.put("total", total);
		map.put("rows", lists);
		return JSON.toJSONString(map);
	}
		
	/**
	 * 根据订单修改设备信息
	 * @param equipment_no 设备号
	 * @param rent_enddate 退还时间
	 * @param cost_sum 设备租金
	 * @param remark 备注
	 * @return
	 */
	/*@RequestMapping(value="update_equipment",method=RequestMethod.POST)
	public String update_equipment(String equipment_no,String rent_enddate,BigDecimal cost_sum,String remark){
		equipmentservice.updateEquipment(equipment_no, rent_enddate, cost_sum, remark);
		return "equipment/equipment_list";
	}*/
	/**
	 * 根据设备号查询日租金
	 * @param equipment_no
	 * @return
	 */
	@RequestMapping(value="dayRent")
	public @ResponseBody String queryDayRent(String equipment_no,String equipment_type){
		List list = new ArrayList();
		if(equipment_no.length()==11){
			equipment_type = "0002";
		}else{
			equipment_type="0001";
		}
		String eqip_type ="";
		if(equipment_type.equals("0001")){
			eqip_type="内部设备";
			EquipmentEntity bd = equipmentservice.queryDayRent(equipment_no);
			Map<String,String> ie = infoservice.queryD_country(equipment_no);
			list.add(bd);
			list.add(ie);
		}else if(equipment_type.equals("0002")){
			String countryvalue = equipment_no.substring(0,2);
			Map<String,String> dayrent = equipmentservice.queryOutEquipDayRent(countryvalue);
			list.add(dayrent);
			eqip_type="外部设备";
		}
		String deposit = equipmentservice.queryDepositByEtype(eqip_type);
		list.add(deposit);
		//System.out.println(bd);
//		String ee  =  JSONUtils.toJSONString(bd);
		//String jsons = "{'id':'"+bd.getId()+"','day_rent':'"+bd.getDay_rent()+"'}";
		//System.out.println(bd);
		//System.out.println(JSONUtils.toJSONString(bd));
		//System.out.println(JSONUtils.toJSONString(bd));
		//String jsons = JSON.toJSONString(bd);
		String jsons = JSON.toJSONString(list);
		return jsons;
	}
	
	/**
	 * 根据设备号，或者柜台号，或者国家查询
	 * @param no 设备号
	 * @param counterid 柜台号
	 * @param countrys 国家
	 * @return
	 */
	@RequestMapping(value="query")
	public @ResponseBody String queryEquipmentByNum(String no,String countercode,String countrys,String page,String rows,String type,String equipment_state){
		List<EquipmentEntity> list = new ArrayList<EquipmentEntity>();
		//当前页  
        int intPage = Integer.parseInt((page == null || page == "0") ? "1":page);  
        //每页显示条数  
        int number = Integer.parseInt((rows == null || rows == "0") ? "10":rows);  
        //每页的开始记录  第一页为1  第二页为number +1   
        if(intPage<=0)
        	intPage = 1;
        int start = (intPage-1)*number;  
        int total = 0;
        if(StringUtils.isEmpty(no) && StringUtils.isEmpty(countercode) && StringUtils.isEmpty(countrys) && "1".equals(type)){
        	list = equipmentservice.queryEquipmentByPage(start, number);
        }else{
        	Map map = new HashMap();
        	map.put("no", no.trim());
        	map.put("countercode", countercode);
        	map.put("countrys", countrys);
        	map.put("equipment_state", equipment_state);
        	map.put("start", start);
        	map.put("number", number);
			list = equipmentservice.queryEquipmentByNum(map);
			total = equipmentservice.queryEquipmentByNumTotal(map);
		}
		if(list.size()>0){
			for(EquipmentEntity ee:list){
				ee.setIs_valid(isValid(ee.getIs_valid()));
				ee.setCounterid(equipmentservice.queryCounterName(ee.getCounterid()));
				ee.setD_country(orderService.queryDcountry(ee.getNo()));
				if(ee.getEquipment_type().equals("0001"))
					ee.setDeposit(equipmentservice.queryDepositByEtype("内部设备"));
			} 
		}
		Map maps = new HashMap();
		maps.put("total", total);
		maps.put("rows", list);
		return JSON.toJSONString(maps);
	}
	
	@RequestMapping(value="add")
	public String addEquip(Model model){
		List<CounterEntity> listeounter = counterservice.getList();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");
		String stock_date = sdf.format(new Date());
		model.addAttribute("counterlist",listeounter);
		model.addAttribute("stock_date",stock_date);
		return "equipment/equipment_add";
	}
	
	@RequestMapping(value="add",method=RequestMethod.POST)
	public @ResponseBody String addEquipment(Model model,EquipmentEntity equipment){
		if(equipment.getNo().length()==11){
			equipment.setDeposit("02");
		}else{
			equipment.setDeposit("01");
		}
		equipmentservice.addEquipment(equipment);
		String stock_date = equipment.getStock_date();
		List<CounterEntity> listeounter = counterservice.getList();
		model.addAttribute("stock_date",stock_date);
		model.addAttribute("counterlist",listeounter);
		return "1";
	}
	
	@RequestMapping(value="isExist",method=RequestMethod.POST)
	public @ResponseBody String isExist(String equipment_no){
		int i = equipmentservice.isExist(equipment_no);
		return i>=1?"0":"1";//0存在1不存在
	}
	
	@RequestMapping(value="detail")
	public String detail(Model model,String no){
		Map map = new HashMap();
		String equipmenttype = "0001";
		if(no.length()==11){
			equipmenttype = "0002";
		}
		map.put("equipmentno", no);
		map.put("equipmenttype", equipmenttype);
		EquipmentEntity ee = equipmentservice.queryEquipmentDetail(map);
		if(ee.getRent_begindate()!=null)
		ee.setRent_begindate(subDate(ee.getRent_begindate()));
		if(ee.getRent_enddate()!=null)
		ee.setRent_enddate(subDate(ee.getRent_enddate()));
		if(ee.getRent_expectdate()!=null)
		ee.setRent_expectdate(subDate(ee.getRent_expectdate()));
		if(ee.getScrap_date()!=null)
		ee.setScrap_date(subDate(ee.getScrap_date()));
		if(ee.getStock_date()!=null)
		ee.setStock_date(subDate(ee.getStock_date()));
		if(ee.getCreate_time()!=null)
		ee.setCreate_time(subDate(ee.getCreate_time()));
		if(ee.getModify_time()!=null)
		ee.setModify_time(subDate(ee.getModify_time()));
		ee.setIs_valid(isValid(ee.getIs_valid()));
		ee.setCounterid(equipmentservice.queryCounterName(ee.getCounterid()));
		ee.setD_country(orderService.queryDcountry(ee.getNo()));
		String equipment_state = ee.getEquipment_state();
		if("0001".equals(equipment_state)){
			ee.setEquipment_state("可用");
		}else if("0002".equals(equipment_state)){
			ee.setEquipment_state("已租");
		}else if("0003".equals(equipment_state)){
			ee.setEquipment_state("预定");
		}
		if(ee.getEquipment_type().equals("0001")){
			ee.setEquipment_type("内部设备");
			ee.setDeposit(equipmentservice.queryDepositByEtype("内部设备"));
		}else{
			ee.setEquipment_type("外部设备");
			ee.setDeposit(equipmentservice.queryDepositByEtype("外部设备"));
		}
		model.addAttribute("equipment",ee);
		return "equipment/equipment_detail";
	}
	
	@RequestMapping(value="edit")
	public String edit(Model model,String no){
		Map map = new HashMap();
		String equipmenttype = "0001";
		if(no.length()==11){
			equipmenttype = "0002";
		}
		map.put("equipmentno", no);
		map.put("equipmenttype", equipmenttype);
		EquipmentEntity ee = equipmentservice.queryEquipmentDetail(map);
		if(ee.getRent_begindate()!=null)
		ee.setRent_begindate(subDate(ee.getRent_begindate()));
		if(ee.getRent_enddate()!=null)
		ee.setRent_enddate(subDate(ee.getRent_enddate()));
		if(ee.getRent_expectdate()!=null)
		ee.setRent_expectdate(subDate(ee.getRent_expectdate()));
		if(ee.getScrap_date()!=null)
		ee.setScrap_date(subDate(ee.getScrap_date()));
		if(ee.getStock_date()!=null)
		ee.setStock_date(subDate(ee.getStock_date()));
		if(ee.getCreate_time()!=null)
		ee.setCreate_time(subDate(ee.getCreate_time()));
		if(ee.getModify_time()!=null)
		ee.setModify_time(subDate(ee.getModify_time()));
		ee.setIs_valid(isValid(ee.getIs_valid()));
		ee.setCounterid(equipmentservice.queryCounterName(ee.getCounterid()));
		ee.setD_country(orderService.queryDcountry(ee.getNo()));
		String equipment_state = ee.getEquipment_state();
		if("0001".equals(equipment_state)){
			ee.setEquipment_state("可用");
		}else if("0002".equals(equipment_state)){
			ee.setEquipment_state("已租");
		}else if("0003".equals(equipment_state)){
			ee.setEquipment_state("预定");
		}
		if(ee.getEquipment_type().equals("0001")){
			ee.setEquipment_type("内部设备");
			ee.setDeposit(equipmentservice.queryDepositByEtype("内部设备"));
		}else{
			ee.setEquipment_type("外部设备");
			ee.setDeposit(equipmentservice.queryDepositByEtype("外部设备"));
		}
		model.addAttribute("equipment",ee);
		return "equipment/equipment_edit";
	}
	//判断设备是否有效0001有效，0002无效
	public String isValid(String isValid){
		if(isValid.equals("0001")){
			return "有效";
		}else{
			return "无效";
		}
	}
	
	//截取二期最后一个.0
	public  static String subDate(String dates){
		return dates.substring(0,dates.length()-2);
	}
	
}
